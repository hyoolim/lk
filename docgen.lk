DocumentGeneratorFile := WritableFile/with {
    /write_header := { title ---
        /write[
        '<html>'
        '<head>'
            '<title>Kinetic Class and Library Reference: '; title; '</title>'
            '<link type="text/css" rel="stylesheet" href="./default.css" />'
            '<script type="text/javascript" src="./default.js"></script>'
        '</head>'
        '<body>'
        ]
    }
    /write_footer := { ---
        /write[
        '</body>'
        '</html>'
        ]
    }
    /write_reference := { class ---
        ancestors := class/ancestors
        /write['<div class="class_'; class/.type; '">']
        /write['<h1 class="class_name">'; class/.type; '</h1>']

        ## inheritance tree
        /write['<ul class="inheritance_tree">']
        ancestors/rest/map { ancestor ---
            /write['<li class="ancestor_'; ancestor/.type;
            '"><a href="./'; ancestor/.type; '.html">'; ancestor/.type; '</a>']
        }
        /write['</ul>']

        ## every slot accessible from this class
        slots := [ ]
        ancestors/each { ancestor ---
            ancestor/.slots/each { slot ---
                slots/push![[ancestor/.id == class/.id ?? class :: ancestor; slot]]
            }
        }
        slots = slots/sort { x; y --- x[1] <=> y[1] }
        non_words := '0-9A-Za-z'/to character set/negate!
        /write['<h2 class="slots_header">Slots</h2>']
        /write['<p class="slot_names">']
        slots/each { slot ---
            /write['<span class="slot_for_'; slot[0]/.type; '">']
            slot[0]/.id != class/.id ?? {
                /write['<em>'; slot[0]/.type; '/</em>']
            }
            /write['<a href="#'; slot[1]/replace[non_words; '_']; '">';
            slot[1]; '</a>, </span>']
        }
        /write['</p>']

        ## detail description on each slot
        slots/each { slot ---
            slot_class := slot[0]
            slot_name := slot[1]
            write_description := { function ---
                /write['<div class="slot_description slot_for_';
                slot_class/.type; '">']
                /write['<h3 class="slot_name">']
                slot_class/.id != class/.id ?? {
                    /write['<em>'; slot_class/.type; '/</em>']
                }
                /write['<a name="';
                slot_name/replace[non_words; '_']; '">'; slot_name]
                function/ancestor?[Function] ?? {
                    function/signature/count > 0 ?? {
                        /write['[']
                        function/signature/each { i; sig ---
                            sig_name := sig/name ||| 'a' ++ i/to string
                            /write['<span class="arg">'; sig_name]
                            sig_type := sig/type
                            sig_type/nil?/not? && Object != sig_type ?? {
                                /write[' : <a href="./'; sig_type/.type;
                                '.html">'; sig_type/.type; '</a>']
                            }
                            /write['; </span>']
                        }
                        min := function/minimum_argument_count
                        max := function/maximum_argument_count
                        max > min ?? {
                            last := function/last_argument
                            /write[last/nil? ?? '_' :: last/name; '...; ']
                        }
                        /write[']']
                    }
                }
                /write['</a></h3>']

                ## description
                /write['<p class="slot_text">']
                function/ancestor?[Function] ?? {
                    function/doc/nil?/not? ?? /write[function/doc]
                } :: {
                    /write['Always returns '; function/to code; '.']
                }
                /write['</p>']
                /write['</div>']
            }
            slot_class/.retrieve[slot_name]/do {
                /ancestor?[GenericFunction] ?? {
                    /functions/each { f --- write_description[f] }
                } :: {
                    write_description[/.]
                }
            }
        }
        /write['</div>']
    }
}

#
root := ARGUMENTS[0]
classes := writeln['Writing Index']
DocumentGeneratorFile/new[root ++ '/index.html']/do {
    /write_header['Index']
    [
    Object
    Able
    Boolean
    Buffer
    Character
    CharacterSet
    Comparable
    Dictionary
    Enumerable
    Environment
    Error
    Extension
    F
    File
    FixedInteger
    FixedReal
    Function
    GenericList
    GenericSet
    Integer
    IpAddress
    List
    N
    NegativeInfinity
    Number
    Object
    PositiveInfinity
    Random
    Range
    ReadableFile
    Real
    Socket
    String
    T
    Vector
    VirtualMachine
    WritableFile
    ]/each { class ---
        name := class/.type
        /write['<li><a href="./'; name; '.html">'; name; '</a></li>']
        writeln['Writing '; name]
        DocumentGeneratorFile/new[root ++ '/' ++ name ++ '.html']/do {
            /write_header[name]
            /write_reference[class]
            /write_footer
            /close
        }
    }
    /write['</ul>']
    /write_footer
    /close
}
