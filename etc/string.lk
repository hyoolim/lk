# String
#
'--- ** (repetition) ---'/println
'Ho! ' ** 3 ->toCode ->println
#
'--- ++ (concat) ---'/println
a := 'hello '
a ++= 'world'
a ->toCode ->println
#
'--- <=> (comparison) ---'/println
'abcdef' <=> 'abcde' ->toCode ->println
'abcdef' <=> 'abcdef' ->toCode ->println
'abcdef' <=> 'abcdefg' ->toCode ->println
'abcdef' <=> 'ABCDEF' ->toCode ->println
#
'--- each ---'/println
'hello;world'/each[';'] { v --- '<'/print; v/print; '>'/println }
#
'--- index ---'/println
'hello'/find['e'] ->toCode ->println
'hello'/find['lo'] ->toCode ->println
'hello'/find['a'] ->toCode ->println
#
'--- justifyLeft ---'/println
'hello'/justifyLeft[4] ->toCode ->println
'hello'/justifyLeft[20] ->toCode ->println
#
'--- justifyCenter ---'/println
'hello'/justifyCenter[4] ->toCode ->println
'hello'/justifyCenter[20] ->toCode ->println
#
'--- justifyRight ---'/println
'hello'/justifyRight[4] ->toCode ->println
'hello'/justifyRight[20] ->toCode ->println
#
'--- set! ---'/println
'hello'/set![2; 4; 'xyz'] ->toCode ->println
'hello'/set![-4; 2; 'xyz'] ->toCode ->println
'hello'/set![2; 0; 'xyz'] ->toCode ->println
#
'--- divide ---'/println
'nows  the time' % ' ' ->toCode ->println
'mellow yellow' % 'ello' ->toCode ->println
#
'--- char/toString --'/println
char := Character/new[] + 48
char/toString -> println
