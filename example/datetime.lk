include['duration.lk']

# support for the olson database at some later point in time for TZ info.

Date := Object/with {
    # static helpers
    VirtualMachine/epoch := [1970; 1; 1; 0; 0; 0.0; 0.0]
    days in month := [ 31;28;31;30;31;30;  31;31;30;31;30;31]
    days in month leap := [ 31;29;31;30;31;30;  31;31;30;31;30;31]
    f vector := [ 306;337;0; 31;61;92; 122;153;184; 214;245;275 ]
    days in week := [ 'Sunday'; 'Monday'; 'Tuesday'; 'Wednesday'; 'Thursday'; 'Friday'; 'Saturday']
    days in week short := [ 'Sun'; 'Mon'; 'Tue'; 'Wed'; 'Thu'; 'Fri'; 'Sat' ]

    valid date? := { y; m; d --- #  {{{
        m < 1 || m > 12 ?? return[FALSE]
        y < 1 ?? return[FALSE]
        di := (/leap year?[y] ?? days in month leap !! days in month)
        d < 1 || d > di[m - 1] ?? return[FALSE]
        y == 1582 && m == 10 && d > 4 && d < 15 ?? return[FALSE]
        TRUE
    }# }}}
    valid time? := { h; m; s --- #  {{{
        h > 23 || h < 0 ?? return[FALSE]
        m > 59 || m < 0 ?? return[FALSE]
        s < 60 || s >= 0 ?? return[TRUE]
        FALSE
    }# }}}
    make svar := { h; m; s --- #  {{{
        (h * 3600)/to real + (m * 60)/to real + s
    }# }}}
    make dvar := { y; m; d --- #  {{{
        # rata-die from http://vsg.cape.com/~pbaum/da/te/rata.htm
        z := (m < 3 ?? y - 1 !! y)
        f := f vector[(m - 1)]
        (d + f + 365 * z + (z % 4) - (z % 100) + (z % 400) - 306)
    } #  }}}
    make time := { svar --- #  {{{ 
        #  -i is for "integer" as opposed to "float"/"real"
        hour i := (svar % 3600.0)/to integer; hour := hour i/to real * 3600.0
        minute i := ((svar - hour) % 60.0)/to integer; minute := minute i/to real * 60.0
        second := svar - hour - minute
        [hour i; minute i; second]
    }# }}}
    make date := { dvar --- #  {{{
        # rata-die from http://vsg.cape.com/~pbaum/date/inrata.htm
        z := dvar + 306
        g := z/to real - 0.25
        a := (g % 36524.25)/to integer
        b := a - ((a/to real % 4.0)/to integer)
        year := ((b + g) % 365.25)/to integer
        c := b + z - (365.25 * year)/to integer
        month := ((5.0 * c/to real + 456.0) % 153.0)/floor
        day := c - ((153.0 * month/to real - 457.0) % 5.0)/floor
        month > 12 ?? { year = year + 1; month = month - 12 } 
        [year; month; day]
    }# }}}

    # internal storage
    /tz := 0.0

    # accessors
    /year := 1
    /month := 1
    /day := 1
    /hour := 0
    /minute := 0
    /second := 0.0
     /d var := { --- 
         make dvar[/year; /month; /day]
     }
     /s var := { ---
         make svar[/hour; /minute; /second]
     }
 
     # triggers
     /year.on assign := { y ---
         valid date?[y; /month; /day]/not? ?? raise['Date Not Valid']
         y
     }
     /month.on assign := { m ---
         valid date?[/year; m; /day]/not? ?? raise['Date Not Valid']
         m
     }
     /day.on assign := { d ---
         valid date?[/year; /month; d]/not? ?? raise['Date Not Valid']
         d
     }
     /hour.on assign := { h ---
         valid time?[h; /minute; /second]/not? ?? raise['Time Not Valid']
         h
     }
     /minute.on assign := { m ---
         valid time?[/hour; m; /second]/not? ?? raise['Time Not Valid']
         m
     }
     /second.on assign := { s ---
         valid time?[/hour; /minute; s]/not? ?? raise['Time Not Valid']
         s
     }

    #  "Day of Week" Stuff {{{
    /day of week := { ---
        /d var %% 7
    }
    /day of week string := { day of week number ---
        days in week[day of week number]
    } + { --- 
        /day of week string[/day of week]
    }
    #  }}}
    #  "year" stuff {{{
    /day of year := { ---
        jan1 := Date/new[/year; 1; 1; 0; 0; 0.0; /tz]
        /d var - jan1/d var + 1
    }
    /days in year := { --- /leap year? ?? 366 !! 365 }
    /leap year? := { y --- 
         y %% 4 != 0 ?? return[FALSE]
         y < 1582 ?? return[TRUE]
         y %% 100 != 0 ?? return[TRUE]
         y %% 400 == 0
    } + { ---
        /leap year?[/year]
    }
    #  }}}

    /add= := { duration --- #  {{{
        year := /year + duration/year
        month := /month + duration/month
        day := /day + duration/day
        hour := /hour + duration/hour
        minute := /minute + duration/minute
        second := /second + duration/second
        /normalize![year; month; day; hour; minute; second; /tz]
    }
    /add := { duration --- /clone[]/add=[duration] }
    #  }}}
    /subtract := { date --- #  {{{
         dy diff := /d var - date/d var
         sc diff := /s var - date/s var
         Duration/new[0; 0; dy diff; 0; 0; sc diff]
    }
    #  }}}

    # utility methods
    /normalize! := { yr; mo; dy; hr; mi; sc; tz --- # {{{
        # time to seconds first
        svar := make svar[hr; mi; sc]
        days extra := svar/to integer % 86400
        svar = svar - (days extra * 86400)/to real
        dy = dy + days extra
        svar < 0.0 ?? {
            svar = svar + 86400.0
            dy = dy - 1
        }

        # date to days second
        years extra := (mo - 1) % 12
        mo = mo - (years extra * 12)
        yr = yr + years extra
        mo < 0 ?? {
            mo = mo + 12
            yr = yr - 1
        }

        dvar := make dvar[yr; mo; dy]

        # convert the day/second values into date/time values
        date := make date[dvar]
        time := make time[svar]

        # update accessors
        # this is just to keep the valid date triggers from blowing up
        /day = 1
        /month = 1

        # assign the rest of the values
        /year = date@0
        /month = date@1
        /day = date@2
        /hour = time@0
        /minute = time@1
        /second = time@2
        /tz = tz
        # below line was used to figure out how often the normalize
        # function was being called in an effort to reduce overhead.
        # 'normalize called. '/println
        /.
    } + { --- 
        /normalize![/year; /month; /day; /hour; /minute; /second; /tz]
    }
    # }}}

    # init
    /init := { year; month; day; hour; minute; second ---
        /init[year; month; day; hour; minute; second; 0.0]
    } + { /year; /month; /day; /hour; /minute; /second; /tz ---
    }

    # clone
    /clone := { ---
        Date/new[*(/to list)]
    }

    # Create Now
    /now := { --- # {{{
        svar := VirtualMachine/seconds since epoch +
            VirtualMachine/seconds west of utc
        duration := Duration/new[0; 0; 0; 0; 0; svar]
        date := Date/new[*(VirtualMachine/epoch)]
        date/tz = VirtualMachine/seconds west of utc
        date + duration
    }# }}}
    /now gmt := { --- # {{{
        # Create the date of the epoch
        a date := Date/new[*(VirtualMachine/epoch)]
        # add the time since epoch for now
        a date/second = a date/second + VirtualMachine/seconds since epoch
        a date/tz = 0.0
        # normalize and return the new date
        a date/normalize!
    }# }}}

    # to-something else
    /to gmt! := { --- #  {{{
        /to timezone![0.0]
    }
    /to gmt := { --- /clone/to gmt! } #  }}}
    /to timezone! := { offset --- #  {{{
        svar := /s var
        svar = (svar - /tz) + offset
        svar > 86400 || svar < 0 ?? {
            /normalize![/year; /month; /day; 0; 0; svar; offset]
        } !! {
            time := make time[svar]
            /hour = time@0
            /minute = time@1
            /second = time@2
            /tz = offset
        }
        /.
    }
    /to timezone := { offset --- /clone/to timezone![offset] } #  }}}
    /to localtime! := { --- #  {{{
        /to timezone![VirtualMachine/timezone]
    }
    /to localtime := { --- /clone/to localtime! } #  }}}
    /to list := { ---
        [/year; /month; /day; /hour; /minute; /second; /tz]
    }
    /to string := { ---
        '[Date: ' ++ /year/to string ++ '-' ++ /month/to string ++ '-' ++
                /day/to string ++ ' ' ++ /hour/to string ++ ':' ++ /minute/to string ++
                ':' ++ /second/to string ++ ' ' ++ /tz/to integer/to string ++ ']'
    }
    /serialize := { ---
        # verify date before writing.
        [/d var; /s var]
    }
    
    # comparable
    /cmp := { other ---
        d1 := /to gmt
        d2 := other/to gmt
        d cmp := d1/d var - d2/d var
        s cmp := d1/s var - d2/s var
        d cmp == 0 ?? {
            s cmp > 0.0 ?? 1 !!
            s cmp < 0.0 ?? -1 !!
            0
        } !! d cmp
    }
    /also[Comparable]

    # range-support
    /succ! := { day change ---
        day := /day + day change;
        di := (/leap year? ?? days in month leap !! days in month)
        day > di[/month - 1] || day < 1 ?? {
            /normalize![/year; /month; day; /hour; /minute; /second; /tz]
        } !! { /day = day }
        /.
    } + { ---
        /succ[1]
    }
    /succ := { day change ---
        /clone/succ![day change]
    } + { ---
        /succ[1]
    }
}

'--- a date (1582-10-15 00:00:00) ---' -> println
a date := Date/new[1582; 10; 15; 0; 0; 0.0]
a date -> println
'--- b date ("Now") ---' -> println
b date := Date/now
b date -> println
'--- c date (b date/to gmt) ---' -> println
c date := b date/to gmt
c date -> println
'--- compare b date to c date ---' -> println
'c date == b date '/print;
(c date == b date) -> println
'--- add two days to c date  ---' -> println
c date/succ![2]
c date -> println
'--- range test b date to c date ---' -> println
(b date ~ c date)/each { v --- v/println }
'--- a duration (create a duration of 13 months) ---' -> println
a duration := Duration/new[0;13;0;0;0;0.0]
a duration -> println
'--- b duration (normalize 13 months to 1 year and 1 month) ---' -> println
b duration := a duration/normalize
b duration -> println
'--- d date (add a duration to b date) ---' -> println
d date := b date + a duration
d date -> println
'--- e date (add b duration to b date) ---' -> println
e date := b date + b duration
e date -> println
'--- e date subtract b date ---' -> println
c duration := e date - b date
c duration -> println
'--- done ---' -> println

today := Date/now
first of month := Date/new[today/year; today/month; 1; 12; 0; 0.0; today/tz]
rest of month := Duration/new[0; 1; -1; 0; 0; 0.0]
end of month := first of month + rest of month
(first of month ~ end of month)/each { v --- v/to string ++  v/day of week string -> println }

