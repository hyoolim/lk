# String
#
'--- ** (repetition) ---'/println
'Ho! ' ** 3 ->to code ->println
#
'--- ++ (concat) ---'/println
a := 'hello '
a ++= 'world'
a ->to code ->println
#
'--- <=> (comparison) ---'/println
'abcdef' <=> 'abcde' ->to code ->println
'abcdef' <=> 'abcdef' ->to code ->println
'abcdef' <=> 'abcdefg' ->to code ->println
'abcdef' <=> 'ABCDEF' ->to code ->println
#
'--- each ---'/println
'hello;world'/each[';'] { v --- '<'/print; v/print; '>'/println }
#
'--- index ---'/println
'hello'/find['e'] ->to code ->println
'hello'/find['lo'] ->to code ->println
'hello'/find['a'] ->to code ->println
#
'--- justify left ---'/println
'hello'/justify left[4] ->to code ->println
'hello'/justify left[20] ->to code ->println
#
'--- justify center ---'/println
'hello'/justify center[4] ->to code ->println
'hello'/justify center[20] ->to code ->println
#
'--- justify right ---'/println
'hello'/justify right[4] ->to code ->println
'hello'/justify right[20] ->to code ->println
#
'--- set! ---'/println
'hello'/set![2; 4; 'xyz'] ->to code ->println
'hello'/set![-4; 2; 'xyz'] ->to code ->println
'hello'/set![2; 0; 'xyz'] ->to code ->println
#
'--- divide ---'/println
'nows  the time' % ' ' ->to code ->println
'mellow yellow' % 'ello' ->to code ->println
#
'--- char/to string --'/println
char := Character/new[] + 48
char/to string -> println
