# "Classes"
Able       := Object/with { }
Comparable := Able/with { }
Enumerable := Able/with { }
Range      := Object/with { }

# Boolean
Boolean/do {

    # Always returns itself.
    /toBoolean := { | /. }

    # Returns true or false.
    /toCode := { | /toString }
}

# Character
Character/do {
    /count := 1
    /also(Comparable)
}

# CharacterSet
CharacterSet/do {
    /count := 1

    # Returns an inverted copy of itself.
    /negate := { args... | /clone/negate!(*args) }
}

# CFunction < Function

# Comparable < Able
Comparable/do {

    # Returns true if it's in between min and max, using < and >
    # operators for comparison, false otherwise.
    /between? := { min, max | min <= /. && /. <= max }

    # Returns true if it's equal to the other, using <=> operator
    # for comparison, false otherwise.
    /'==' := { other | /. <=> other ->zero? }

    # Returns true if it's greater than or equal to the other, using
    # < operator for comparison, false otherwise.
    /'>=' := { other | /. < other ->not? }

    # Returns true if it's greater than the other, using <=> operator for
    # comparison, false otherwise.
    /'>' := { other | /. <=> other ->positive? }

    # Returns true if it's less than or equal to the other, using
    # > operator for comparison, false otherwise.
    /'<=' := { other | /. > other ->not? }

    # Returns true if it's less than the other, using <=> operator for
    # comparison, false otherwise.
    /'<' := { other | /. <=> other ->negative? }
}

# Map < GenericSet
Map/do {
    /'==' := { ... }

    # Iterates over all the items and calls the block with the value.
    /each := { block | /keys/each { v | block(v, /at(v)) } }
}

# Enumerable < Able
Enumerable/do {

    # Returns true if all the items are equal to matchValue argument,
    # using == operator for comparison, false otherwise.
    /all? := { matchValue | /all? { v | matchValue == v } }

    # Returns true if all the items return true via matchUsing
    # argument, false otherwise.
    /all? += {
        matchUsing : Function
        ---
        /each { v | matchUsing(v) ->not? ? return(False) }
        True
    }

    # Returns true if any of the items are equal to matchValue argument,
    # using == operator for comparison, false otherwise.
    /any? := { matchValue | /any? { v | matchValue == v } }

    # Returns true if any of the items return true via matchUsing
    # argument, false otherwise.
    /any? += {
        matchUsing : Function
        ---
        /each { v | matchUsing(v) ? return(True) }
        False
    }

    # Returns the first item equal to matchValue argument,
    # using == operator for comparison, nil otherwise.
    /find := { matchValue | /find { v | matchValue == v } }

    # Returns the first item that return true via matchUsing argument,
    # nil otherwise.
    /find += {
        matchUsing : Function
        ---
        /each { v | matchUsing(v) ? return(v) }
        Nil
    }

    # Alias for any? slot.
    /has? := /.retrieve('any?')

    # Returns a list of all items equal to matchValue argument,
    # using == operator for comparison.
    /keep := { matchValue | /keep { v | matchValue == v } }

    # Returns a list of all items that return true via matchUsing argument.
    /keep += {
        matchUsing : Function
        ---
        /reduce([ ]) { a, v | matchUsing(v) ? a/push!(v) ! a }
    }

    # Returns a list of items that are returned from using argument.
    /map := { using | /reduce([ ]) { a, v | a/push!(using(v)) } }

    # Returns the maximum value, using the <=> operator for comparison.
    /max := { | /max { x, y | x <=> y } }

    # Returns the maximum value, using the <=> argument for comparison.
    /max += { cmp | /reduce(NegativeInfinity) { a, v | cmp(a, v) < 0 ? v ! a } }

    # Returns the minimum value, using the <=> operator for comparison.
    /min := { | /min { x, y | x <=> y } }

    # Returns the minimum value, using the <=> argument for comparison.
    /min += { cmp | /reduce(PositiveInfinity) { a, v | cmp(a, v) > 0 ? v ! a } }

    # NEED DOCUMENTATION
    /reduce := { initialValue, using |
        /each { v | initialValue = using(initialValue, v) }
        initialValue
    }

    # Returns a list of all items that does not equal to the matchValue,
    # using == operator for comparison.
    /reject := { matchValue | /reject { v | matchValue == v } }

    # Returns a list of all items excluding the ones that return true
    # via the matchUsing argument.
    /reject += {
        matchUsing : Function
        ---
        /reduce([ ]) { a, v | matchUsing(v) ? a ! a/push!(v) }
    }

    # Returns a sorted list of items.
    /sort := { args... | /toList/sort!(*args) }

    # Returns a list of all the items.
    /toList := { | /reduce([ ]) { a, v | a/push!(v) } }

    # Returns a space delimited string composed of all the items.
    /toString := { | /reduce('') { a, v | a ++ v/toString ++ ' ' } }
}

# Environment
ENV := Environment
ENV/do {

    # Iterates over all the environment items and calls the block
    # with the value.
    /each := { block | /keys/each { v | block(v, /at(v)) } }
}

# Error
Error/do {
    /init := { /message : String | }
    /toString := { | /message/toString }
}
MessageError/do {
    /toString := { |
        'Unable to send ' ++ /message ++ /args/toCode ++
        ' message to ' ++ /receiver/toCode
    }
}
NameError/do {
    /toString := { | "Unable to access '" ++ /name ++ "'" }
}

# Extension

# F (false) < Boolean
False/do {

    # Never does anything.
    /'?' := { ifTrue | }

    # Always calls ifFalse argument.
    /'?' += { ifTrue, ifFalse | ifFalse() }
    /not? := True
    /toString := 'False'
}

# File

# FixedInteger < Integer < Number

# FixedReal < Real < Number

# Function

# GenericFunction < Function

# Sequence
Sequence/do {
    /'++' := { other | list := /clone; list ++= other; list }
    /each := { block |
        i := 0
        block/minimum_argument_count <= 1 ?
            { while(i < /count) { block(/at(i)); i = i/succ } } !
            { while(i < /count) { block(i, /at(i)); i = i/succ } }
    }
    /'==' += { to | False }
    /fill! := { do | /each { i, v | /set!(i, do) }; /. }

    # Returns the first item in the list.
    /first := { | /at(0) }

    # Returns the last item in the list.
    /last := { | /at(-1) }
    /limit := { args... | /clone/limit!(*args) }

    # Replaces each item in the list with the value returned from
    # running using argument.
    /map! := { using | /each { i, v | /set!(i, using(v)) }; /. }
    /offset := { args... | /clone/offset!(*args) }

    # Removes the last item in the list and returns it.
    /pop! := { | value := /at(-1); /limit!(-1); value }

    # Inserts the value argument to the end of the list.
    /push! := { value | /set!(/count, value); /. }
    /quicksort! := { | /quicksort! { x, y | x <=> y } }
    /quicksort! += { cmp | /quicksort!(cmp, 0, /count - 1) }
    /quicksort! += { cmp, low, hi |
        low < hi ? {
            l := low/clone
            h := hi/clone
            p := /at(hi)
            loop {
                while(l < h && cmp(/at(l), p)/positive?/not?) { l += 1 }
                while(h > l && cmp(/at(h), p)/negative?/not?) { h -= 1 }
                l < h ? /swap!(l, h)
                l >= h ? break
            }
            /swap!(l, hi)
            /quicksort!(cmp, low, l - 1)
            /quicksort!(cmp, l + 1, hi)
        }
        /.
    }
    /'**' := { count |
        count == 0 ? return(/clone/clear!)
        2/to(count)/reduce(/clone) { a, v | a ++= /. }
    }

    # Returns all but the first item in the list.
    /rest := { args... | /clone/rest!(*args) }
    /reverse := { args... | /clone/reverse!(*args) }

    # Removes the first item from the list and returns it.
    /shift! := { | value := /at(0); /remove!(0); value }
    /slice := { args... | /clone/slice!(*args) }
    /slice! += { a : Range | /slice!(a/from, a/to) }
    /sort! := /.retrieve('quicksort!')

    # Returns true if there are any items in the list, false otherwise.
    /toBoolean := { | /count != 0 }

    # Inserts the value argument before the first item in the list.
    /unshift! := { value | /insert!(0, value); /. }

    # Alias for slice slot.
    /at += /.retrieve('slice')
    /also(Comparable)
    /also(Enumerable)
}

# GenericSet
GenericSet/do {

    # Returns true if there are any items in the set, false otherwise.
    /toBoolean := { | /count != 0 }
}

# Integer < Number
Integer/do {
    /'+' := { value : Real | /toReal + value }
    /'<=>' := { to : Real | /toReal - to }
    /'%' := { by : Real | /toReal % by }
    /'==' := { to : Real | /toReal == to }
    /integer? := True
    /'*' := { by : Real | /toReal * by }
    /'-' := { value : Real | /toReal - value }

    # Always returns itself.
    /toInteger := { | /. }
    /toString := { | /toString('%i') }
}

# IpAddress

# KineticFunction < Function

# List < Sequence
List/do {
    /'<=>' := { to |
        d := to/count - /count
        d > 0 ? to ! /. ->each { i, v |
            d := v <=> to(i)
            d/zero?/not? ? return(d)
        }
        d
    }

    # Returns true if each item in the list is equal to the ones in
    # to argument, using != operator for comparison, false otherwise.
    /'==' := { to |
        to/count - /count != 0 ? return(False)
        /each { i, v | v != to(i) ? return(False) }
        True
    }
    /flatten := { args... | /clone/flatten!(*args) }
    /flatten! := { ... }
    /join := { | /join('') }
    /join += { delim |
        /count < 1 ? return('')
        /rest/reduce(/first/clone) { a, v | (a ++= delim) ++= v }
    }
    /toCode := { | '(' ++ (/map { x | x/toCode } ->join('; ')) ++ ')' }
    /toList := { | /clone }
}

# N (nil) < Boolean
Nil/do {
    /nil? := True
    /toBoolean := False
    /toCode := { | /toString }
    /toString := 'Nil'
}

# NegativeInfinity (-inf)
NegativeInfinity/do {
    /.forward := { args... | NegativeInfinity }
    /'<=>' := { to | -1 }
    /inf? := True
    /negate := PositiveInfinity
    /toString := 'NegativeInfinity'
}

# Number
Number/do {

    # Returns the absolute value of the number.
    /abs := { | /negative? ? /negate ! /. }
    /'==' := { to | False }
    /finite? := True
    /inf? := False
    /integer? := False
    /real? := False
    /succ := { | /. + 1 }
    /toBoolean := { | /. != 0 }
    /toCode := { | /toString }
    /toNumber := { | /. }
    /also(Comparable)
}

# Object
Object/do {
    /'!' := { | /not? }
    /'@' := { | /toList }
    /'$' := { | /toString }
    /'-' := { | /negate }
    /'+' := { | /toNumber }
    /'+' += { other | /clone() += other }

    # Returns other if the receiver evaluates
    # to true or false otherwise.
    /'&&' := { other | /toBoolean ? other ! False }
    /'<=>' := { to : PositiveInfinity | -1 }
    /'<=>' += { to : NegativeInfinity | 1 }
    /'==' := { to | /.id == to/.id }
    /in? := { list | list/has?(/.) }

    # Default init function that never does anything.
    /init := { | }
    /'~=' := /.retrieve('==')
    /'?' := { args... | /toBoolean/'?'(*args) }
    /'!=' := { to | /. == to ->not? }
    /new := { args... | new := /alloc; new/init(*args); new }
    /nil? := False
    /'||' := { other | /toBoolean ? /. ! other }
    /'|||' := { other | /nil? ? other ! /. }
    /print := { | /print(STDOUT) }
    /print += { to | to/write(/.); /. }
    /println := { | /println(STDOUT) }
    /println += { to | to/write(/., NEWLINE); /. }
    /'-' += { other | /clone() -= other }
    /to := { to | Range/new(/., to) }
    /toBoolean := True
    /toCode := { | '<<' ++ /toString ++ '>>' }
    /toString := { | /.CLASS ++ '#' ++ /.id/toString }
}

# PositiveInfinity (inf)
PositiveInfinity/do {
    /.forward := { args... | PositiveInfinity }
    /'<=>' := { to | 1 }
    /inf? := True
    /negate := NegativeInfinity
    /toString := 'PositiveInfinity'
}

# Random

# Range
Range/do {
    /each := { block |
        rv := /from
        block/minimum_argument_count <= 1 ? {
            while(rv <=> /to ->positive? ->not?) {
                block(rv)
                rv = rv/succ
            }
        } ! {
            i := 0
            while(i <=> /to ->positive? ->not?) {
                block(i, rv)
                rv = rv/succ
                i = i + 1
            }
        }
    }
    /init := { /from, /to | }
    /toCode := { | /from/toCode ++ '/to(' ++ /to/toCode ++ ')' }
    /also(Enumerable)
}

# Real < Number
Real/do {
    /'+' := { value : Integer | /. + value/toReal }
    /ceil := { | i := /toInteger; /. > 0 && /. - i != 0.0 ? i + 1 ! i }
    /'<=>' := { to : Integer | /. - to/toReal }
    /'%' := { by : Integer | /. % by/toReal }
    /'==' := { to : Integer | /. == to/toReal }
    /floor := { | i := /toInteger; /. > 0 || /. - i == 0.0 ? i ! i - 1 }
    /'*' := { by : Integer | /. * by/toReal }
    /real? := True
    /round := { |
        i := /toInteger
        /. - i > 0.5 ? i + 1 !
        /. - i < -0.5 ? i - 1 !
        i
    }
    /'-' := { value : Integer | /. - value/toReal }
    /toReal := { | /. }
    /toString := { | /toString('%f') }
}

# Set < GenericSet

# Socket

# StandardInput (stdin) < ReadableFile

# StandardOutput (stdout) < WritableFile

# StandardError (stderr) < WritableFile

# Stream

# String
String/do {

    # Returns a copy of the String with the
    # first letter capitalized.
    /cap := { args... | /clone/cap!(*args) }

    # Capitalizes the first letter of the string.
    /cap! := { | c := /at(0); c/between?(0ca, 0cz) ? /at(0) = c + (0cA - 0ca) }

    # Returns a list of strings separated by the delim argument.
    /'%' := { delim |
        a := [ ]
        /each(delim, PositiveInfinity) { v | a/push!(v) }
        a
    }
    /each := { delim, block | /each(delim, PositiveInfinity, block) }
    /each += { delim, max, block |
        t := /.; i := 0; pos := 0; dl := delim/count || 1
        loop {
            e := /find(delim, pos)
            e/nil? || i >= max ?
                { block(t/offset(pos)); break } !
                { block(t/slice(pos, e - pos)) }
            pos = e + dl
            i = i/succ
        }
    }
    /format := { ... }
    /justifyCenter := { len |
        len < /count ? /. ! {
            len = len - /count
            (' ' ** (len % 2)) ++ /. ++ (' ' ** (len - (len % 2)))
        }
    }
    /justifyLeft := { len | len < /count ? /. ! /. ++ (' ' ** (len - /count)) }
    /justifyRight := { len | len < /count ? /. ! (' ' ** (len - /count)) ++ /. }
    /lc := { args... | /clone/lc!(*args) }

    # Lowercases all the letters in the string.
    /lc! := { | /map! { v | v/between?(0cA, 0cZ) ? v + (0ca - 0cA) ! v } }
    /replace := { args... | /clone/replace!(*args) }

    # Replaces all the occurences of from argument in the string
    # with to argument.
    /replace! := { from, to | /. % from ->join(to) }
    /toCode := { | "'" ++ /. ++ "'" }
    /toInteger := { ... }

    # Returns itself.
    /toString := { | /. }
    /trim := { args... | /clone/trim!(*args) }

    # Removes all the whitespaces from beginning and end of the string.
    /trim! := { | /trimLeft!/trimRight! }

    # Removes all the whitespaces from beginning of the string.
    /trimLeft! := { |
        [ ' ', '\n', '\r', '\t' ]/each { v |
            /slice(0, 1) == v ?
                { /slice!(1, /count - 1); /trimLeft! }
        }
        /.
    }

    # Removes all the whitespaces from end of the string.
    /trimRight! := { |
        [ ' ', '\n', '\r', '\t' ]/each { v |
            /slice(/count - 1, 1) == v ?
                { /slice!(0, /count - 1); /trimRight!  }
        }
        /.
    }
    /uc := { args... | /clone/uc!(*args) }

    # Uppercases all the letters in the string.
    /uc! := { | /map! { v | v/between?(0ca, 0cz) ? v + (0cA - 0ca) ! v } }
}

# T (true) < Boolean
True/do {

    # Always calls ifTrue argument.
    /'?' := { ifTrue | ifTrue() }

    # Always calls ifTrue argument.
    /'?' += { ifTrue, ifFalse | ifTrue() }
    /not? := False
    /toString := 'True'
}

# Vector < Sequence

# VirtualMachine
VM := VirtualMachine

# VirtualMachine/Frame
VM/Frame/do {
    breaker := Error/alloc
    /break := { | raise(breaker) }

    # Always calls the block.
    /if := { cond : True, block | block() }

    # Never does anything.
    /if += { cond : False, block | }
    /include += { file | /include(file, RESOURCE) }
    /leave := { | .receiver/.next = Nil }

    # Calls the block forever.
    /loop := { block | rescue { e : breaker | }; once { block(); redo } }

    # Calls the block once.
    /once := { block | block() }
    /require += { file | /require(file, RESOURCE) }
    #/resume := { | .receiver/.return_to = .receiver/proto; .receiver/leave }
    #/retry := { | .receiver/proto/redo; .receiver/resume }
    /read := { args... | STDIN/read(*args) }
    /readln := { | STDIN/read(NEWLINE) }
    /while := { cond : True, block | block(); retry }
    /while += { cond : False, block | }
    /write := { args... | STDOUT/write(*args); /. }
    /writeln := { args... | STDOUT/write(*args, NEWLINE); /. }
}

# VirtualMachine/GarbageCollector

# VirtualMachine/Instruction

# VirtualMachine/Parser

# WritableFile
WritableFile/do {

    # Convert each of the arguments into Strings
    # and calls write on them.
    /write += { args... | args/each { v | /write(v/toString) }; /. }

    # Calls write on the arguments and nl.
    /writeln := { args... | /write(*args, NEWLINE) }
}

# default error handler
rescue { e |
    STDERR/writeln('Error/', e/.CLASS, ': ', e)
    f := .
    c := f/.caller ->nil? ->not? ? loop {
        f = c
        c = c/.caller ->nil? ? break
        f/.function/nil? ? {
            STDERR/writeln('    @ CFunction')
        } ! {
            i := c/.current
            STDERR/writeln('    @ ', i/RESOURCE, ' ', i/LINE, ': ', i/MESSAGE, f/.args/toCode)
        }
    }
}

#
PROGRAM := ARGUMENTS/shift!
LIBRARY := ARGUMENTS/shift!
SCRIPT := ARGUMENTS/shift!
include(SCRIPT, '')
